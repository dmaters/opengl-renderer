#version 460 core
#extension GL_ARB_bindless_texture : require

layout(local_size_x = 1) in;

uniform uint sample_count;
layout(bindless_sampler) uniform samplerCube environment_map;
layout(bindless_image, rgba16f) writeonly uniform imageCube irradiance_map;

#define IRRADIANCE_MAP_SIZE 32
#define PI                  3.1415926535897932384626433832795

vec3 getCubemapNormal(uint face, ivec2 texelCoords) {
	vec2 uv = (texelCoords + 0.5) / IRRADIANCE_MAP_SIZE;
	vec2 ndc = uv * 2.0 - 1.0;

	switch (face) {
		case 0:
			return normalize(vec3(+1, -ndc.y, -ndc.x));
		case 1:
			return normalize(vec3(-1, -ndc.y, +ndc.x));
		case 2:
			return normalize(vec3(+ndc.x, +1, +ndc.y));
		case 3:
			return normalize(vec3(+ndc.x, -1, -ndc.y));
		case 4:
			return normalize(vec3(+ndc.x, -ndc.y, +1));
		case 5:
			return normalize(vec3(-ndc.x, -ndc.y, -1));
		default:
			return vec3(0.0);
	}
}

float radicalInverse_VdC(uint bits) {
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10;
}

vec2 hammersley(uint i, uint N) {
	return vec2(float(i) / float(N), radicalInverse_VdC(i));
}
vec3 hemisphereSample_Hammersley(uint i, uint N) {
	vec2 xi = hammersley(i, N);
	float phi = xi.x * 2.0 * PI;
	float cosTheta = sqrt(1.0 - xi.y);
	float sinTheta = sqrt(xi.y);

	return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

vec3 importanceSampleCosineWeighted(vec3 N, uint index, uint sampleCount) {
	vec3 sampleDirection = hemisphereSample_Hammersley(index, sample_count);

	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	return tangent * sampleDirection.x + bitangent * sampleDirection.y +
	       N * sampleDirection.z;
}

void main() {
	ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);
	uint face = gl_GlobalInvocationID.z;

	if (texelCoords.x >= IRRADIANCE_MAP_SIZE ||
	    texelCoords.y >= IRRADIANCE_MAP_SIZE)
		return;

	vec3 N = getCubemapNormal(face, texelCoords);

	vec3 irradiance = vec3(0.0);

	for (uint i = 0u; i < sample_count; ++i) {
		vec3 L = importanceSampleCosineWeighted(N, i, sample_count);
		float NdotL = max(dot(N, L), 0.0);
		irradiance += texture(environment_map, L).rgb * NdotL;
	}
	irradiance /= float(sample_count);
	imageStore(irradiance_map, ivec3(texelCoords, face), vec4(irradiance, 1));
}
